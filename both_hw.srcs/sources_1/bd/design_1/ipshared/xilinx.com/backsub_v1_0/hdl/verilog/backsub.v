// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="backsub,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=230431,HLS_SYN_TPT=none,HLS_SYN_MEM=256,HLS_SYN_DSP=13,HLS_SYN_FF=3282,HLS_SYN_LUT=5048}" *)

module backsub (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 19'b1;
parameter    ap_ST_st2_fsm_1 = 19'b10;
parameter    ap_ST_st3_fsm_2 = 19'b100;
parameter    ap_ST_st4_fsm_3 = 19'b1000;
parameter    ap_ST_st5_fsm_4 = 19'b10000;
parameter    ap_ST_st6_fsm_5 = 19'b100000;
parameter    ap_ST_st7_fsm_6 = 19'b1000000;
parameter    ap_ST_st8_fsm_7 = 19'b10000000;
parameter    ap_ST_pp0_stg0_fsm_8 = 19'b100000000;
parameter    ap_ST_st12_fsm_9 = 19'b1000000000;
parameter    ap_ST_pp1_stg0_fsm_10 = 19'b10000000000;
parameter    ap_ST_pp2_stg0_fsm_11 = 19'b100000000000;
parameter    ap_ST_st40_fsm_12 = 19'b1000000000000;
parameter    ap_ST_pp3_stg0_fsm_13 = 19'b10000000000000;
parameter    ap_ST_st44_fsm_14 = 19'b100000000000000;
parameter    ap_ST_st45_fsm_15 = 19'b1000000000000000;
parameter    ap_ST_st46_fsm_16 = 19'b10000000000000000;
parameter    ap_ST_st47_fsm_17 = 19'b100000000000000000;
parameter    ap_ST_st48_fsm_18 = 19'b1000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 6;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv17_0 = 17'b00000000000000000;
parameter    ap_const_lv32_12C00 = 32'b10010110000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_3DCCCCCD = 32'b111101110011001100110011001101;
parameter    ap_const_lv32_3E4CCCCD = 32'b111110010011001100110011001101;
parameter    ap_const_lv32_3F333333 = 32'b111111001100110011001100110011;
parameter    ap_const_lv17_12C00 = 17'b10010110000000000;
parameter    ap_const_lv17_1 = 17'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv9_181 = 9'b110000001;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv9_1D = 9'b11101;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (C_S_AXI_CRTL_BUS_DATA_WIDTH / ap_const_int64_8);
parameter    C_M_AXI_GMEM_WSTRB_WIDTH = (C_M_AXI_GMEM_DATA_WIDTH / ap_const_int64_8);
parameter    C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1 : 0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1 : 0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1 : 0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1 : 0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1 : 0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1 : 0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1 : 0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1 : 0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1 : 0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1 : 0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1 : 0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1 : 0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1 : 0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1 : 0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1 : 0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1 : 0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm = 19'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_37;
reg    ap_ready;
wire   [31:0] frame_in;
wire   [31:0] frame_out;
wire    init;
wire   [31:0] ap_return;
wire    backsub_AXILiteS_s_axi_U_ap_dummy_ce;
wire    backsub_CRTL_BUS_s_axi_U_ap_dummy_ce;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
wire   [31:0] gmem_AWADDR;
wire   [0:0] gmem_AWID;
wire   [31:0] gmem_AWLEN;
wire   [2:0] gmem_AWSIZE;
wire   [1:0] gmem_AWBURST;
wire   [1:0] gmem_AWLOCK;
wire   [3:0] gmem_AWCACHE;
wire   [2:0] gmem_AWPROT;
wire   [3:0] gmem_AWQOS;
wire   [3:0] gmem_AWREGION;
wire   [0:0] gmem_AWUSER;
reg    gmem_WVALID;
wire    gmem_WREADY;
wire   [7:0] gmem_WDATA;
wire   [0:0] gmem_WSTRB;
wire    gmem_WLAST;
wire   [0:0] gmem_WID;
wire   [0:0] gmem_WUSER;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire   [31:0] gmem_ARADDR;
wire   [0:0] gmem_ARID;
wire   [31:0] gmem_ARLEN;
wire   [2:0] gmem_ARSIZE;
wire   [1:0] gmem_ARBURST;
wire   [1:0] gmem_ARLOCK;
wire   [3:0] gmem_ARCACHE;
wire   [2:0] gmem_ARPROT;
wire   [3:0] gmem_ARQOS;
wire   [3:0] gmem_ARREGION;
wire   [0:0] gmem_ARUSER;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [7:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
wire    backsub_gmem_m_axi_U_ap_dummy_ce;
reg   [16:0] indvar_reg_296;
reg   [16:0] ap_reg_ppstg_indvar_reg_296_pp0_it1;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_8;
reg    ap_sig_bdd_250;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg   [0:0] exitcond8_reg_662;
reg    ap_sig_bdd_259;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg   [16:0] i1_reg_308;
reg   [16:0] i_reg_319;
reg   [16:0] indvar1_reg_330;
wire   [0:0] init_read_read_fu_152_p2;
reg   [0:0] init_read_reg_638;
reg   [31:0] frame_out_read_reg_642;
reg   [31:0] frame_in_read_reg_647;
wire  signed [63:0] tmp_17_fu_386_p1;
reg  signed [63:0] tmp_17_reg_652;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_289;
reg    ap_sig_ioackin_gmem_ARREADY;
reg   [31:0] grp_fu_373_p2;
wire   [0:0] exitcond8_fu_390_p2;
reg   [0:0] ap_reg_ppstg_exitcond8_reg_662_pp0_it1;
wire   [16:0] indvar_next_fu_396_p2;
reg   [16:0] indvar_next_reg_666;
reg   [7:0] gmem_addr_1_read_reg_671;
wire   [0:0] exitcond_fu_407_p2;
reg   [0:0] exitcond_reg_676;
reg    ap_sig_cseq_ST_pp1_stg0_fsm_10;
reg    ap_sig_bdd_314;
reg    ap_reg_ppiten_pp1_it0 = 1'b0;
reg    ap_reg_ppiten_pp1_it1 = 1'b0;
reg    ap_reg_ppiten_pp1_it2 = 1'b0;
reg    ap_reg_ppiten_pp1_it3 = 1'b0;
reg    ap_reg_ppiten_pp1_it4 = 1'b0;
reg    ap_reg_ppiten_pp1_it5 = 1'b0;
reg    ap_reg_ppiten_pp1_it6 = 1'b0;
reg    ap_reg_ppiten_pp1_it7 = 1'b0;
reg    ap_reg_ppiten_pp1_it8 = 1'b0;
reg    ap_reg_ppiten_pp1_it9 = 1'b0;
reg    ap_reg_ppiten_pp1_it10 = 1'b0;
reg    ap_reg_ppiten_pp1_it11 = 1'b0;
reg    ap_reg_ppiten_pp1_it12 = 1'b0;
reg    ap_reg_ppiten_pp1_it13 = 1'b0;
reg    ap_reg_ppiten_pp1_it14 = 1'b0;
reg    ap_reg_ppiten_pp1_it15 = 1'b0;
reg    ap_reg_ppiten_pp1_it16 = 1'b0;
reg    ap_reg_ppiten_pp1_it17 = 1'b0;
reg    ap_reg_ppiten_pp1_it18 = 1'b0;
reg    ap_reg_ppiten_pp1_it19 = 1'b0;
reg    ap_reg_ppiten_pp1_it20 = 1'b0;
reg    ap_reg_ppiten_pp1_it21 = 1'b0;
reg    ap_reg_ppiten_pp1_it22 = 1'b0;
reg    ap_reg_ppiten_pp1_it23 = 1'b0;
reg    ap_reg_ppiten_pp1_it24 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it1;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it2;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it3;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it4;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it5;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it6;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it7;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it8;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it9;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it10;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it11;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it12;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it13;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it14;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it15;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it16;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it17;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it18;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it19;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it20;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it21;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it22;
reg   [0:0] ap_reg_ppstg_exitcond_reg_676_pp1_it23;
wire   [16:0] i_2_fu_413_p2;
wire   [63:0] tmp_6_fu_419_p1;
reg   [63:0] tmp_6_reg_685;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it1;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it2;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it3;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it4;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it5;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it6;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it7;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it8;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it9;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it10;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it11;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it12;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it13;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it14;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it15;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it16;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it17;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it18;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it19;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it20;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it21;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it22;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_685_pp1_it23;
wire   [7:0] frame1_q0;
reg   [7:0] val1_reg_703;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it2;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it3;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it4;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it5;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it6;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it7;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it8;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it9;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it10;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it11;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it12;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it13;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it14;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it15;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it16;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it17;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it18;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it19;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it20;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it21;
reg   [7:0] ap_reg_ppstg_val1_reg_703_pp1_it22;
wire   [7:0] frame2_q0;
reg   [7:0] val2_reg_710;
reg   [7:0] ap_reg_ppstg_val2_reg_710_pp1_it2;
reg   [7:0] ap_reg_ppstg_val2_reg_710_pp1_it3;
reg   [7:0] ap_reg_ppstg_val2_reg_710_pp1_it4;
reg   [7:0] ap_reg_ppstg_val2_reg_710_pp1_it5;
wire   [7:0] frame3_q0;
reg   [7:0] val3_reg_731;
wire   [31:0] grp_fu_364_p1;
reg   [31:0] tmp_8_reg_736;
wire   [31:0] grp_fu_367_p1;
reg   [31:0] tmp_11_reg_741;
wire   [31:0] grp_fu_349_p2;
reg   [31:0] tmp_9_reg_751;
wire   [31:0] grp_fu_354_p2;
reg   [31:0] tmp_12_reg_756;
wire   [31:0] grp_fu_370_p1;
reg   [31:0] tmp_15_reg_761;
wire   [31:0] grp_fu_341_p2;
reg   [31:0] tmp_13_reg_766;
wire   [31:0] grp_fu_359_p2;
reg   [31:0] tmp_16_reg_771;
reg   [7:0] loc_V_reg_776;
wire   [22:0] loc_V_1_fu_451_p1;
reg   [22:0] loc_V_1_reg_782;
wire   [7:0] result_V_fu_546_p3;
reg   [7:0] result_V_reg_787;
wire   [0:0] not_tmp_s_fu_586_p2;
reg   [0:0] not_tmp_s_reg_792;
wire   [0:0] exitcond1_fu_600_p2;
reg   [0:0] exitcond1_reg_797;
reg    ap_sig_cseq_ST_pp2_stg0_fsm_11;
reg    ap_sig_bdd_556;
reg    ap_reg_ppiten_pp2_it0 = 1'b0;
reg    ap_reg_ppiten_pp2_it1 = 1'b0;
wire   [16:0] i_1_fu_606_p2;
wire   [63:0] tmp_4_fu_612_p1;
reg   [63:0] tmp_4_reg_806;
wire  signed [63:0] tmp_18_fu_617_p1;
reg  signed [63:0] tmp_18_reg_818;
reg    ap_sig_cseq_ST_st40_fsm_12;
reg    ap_sig_bdd_578;
reg    ap_sig_ioackin_gmem_AWREADY;
wire   [0:0] exitcond2_fu_621_p2;
reg   [0:0] exitcond2_reg_823;
reg    ap_sig_cseq_ST_pp3_stg0_fsm_13;
reg    ap_sig_bdd_591;
reg    ap_reg_ppiten_pp3_it0 = 1'b0;
reg    ap_reg_ppiten_pp3_it1 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond2_reg_823_pp3_it1;
reg    ap_sig_ioackin_gmem_WREADY;
reg    ap_reg_ppiten_pp3_it2 = 1'b0;
wire   [16:0] indvar_next1_fu_627_p2;
wire   [7:0] out_q0;
reg   [7:0] out_load_reg_837;
reg   [31:0] grp_fu_380_p2;
reg    ap_sig_cseq_ST_st44_fsm_14;
reg    ap_sig_bdd_629;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_636;
reg    ap_sig_cseq_ST_st12_fsm_9;
reg    ap_sig_bdd_648;
reg   [16:0] frame1_address0;
reg    frame1_ce0;
reg    frame1_we0;
wire   [7:0] frame1_d0;
reg   [16:0] frame2_address0;
reg    frame2_ce0;
reg    frame2_we0;
wire   [7:0] frame2_d0;
wire   [16:0] frame2_address1;
reg    frame2_ce1;
reg    frame2_we1;
wire   [7:0] frame2_d1;
reg   [16:0] frame3_address0;
reg    frame3_ce0;
reg    frame3_we0;
wire   [7:0] frame3_d0;
wire   [16:0] frame3_address1;
reg    frame3_ce1;
reg    frame3_we1;
wire   [7:0] frame3_d1;
reg   [16:0] out_address0;
reg    out_ce0;
reg    out_we0;
reg   [7:0] out_d0;
reg   [16:0] indvar_phi_fu_300_p4;
wire   [63:0] tmp_s_fu_402_p1;
wire   [63:0] tmp_21_fu_633_p1;
reg    ap_reg_ioackin_gmem_ARREADY = 1'b0;
reg    ap_reg_ioackin_gmem_AWREADY = 1'b0;
reg    ap_reg_ioackin_gmem_WREADY = 1'b0;
reg    ap_sig_cseq_ST_st48_fsm_18;
reg    ap_sig_bdd_767;
wire   [7:0] p_cast_fu_592_p3;
wire   [31:0] grp_fu_364_p0;
wire   [31:0] grp_fu_367_p0;
wire   [31:0] grp_fu_370_p0;
wire   [31:0] grp_fu_345_p2;
wire   [31:0] p_Val2_s_fu_437_p1;
wire   [23:0] p_Result_s_fu_455_p3;
wire   [8:0] tmp_i_i_i_cast2_fu_466_p1;
wire   [8:0] sh_assign_fu_469_p2;
wire   [7:0] tmp_4_i_i_fu_483_p2;
wire   [0:0] isNeg_fu_475_p3;
wire  signed [8:0] tmp_4_i_i_cast_fu_488_p1;
wire   [8:0] sh_assign_1_fu_492_p3;
wire  signed [31:0] sh_assign_1_cast_fu_500_p1;
wire  signed [23:0] sh_assign_1_cast_cast_fu_504_p1;
wire   [53:0] tmp_2_i_i_fu_462_p1;
wire   [53:0] tmp_6_i_i_fu_508_p1;
wire   [23:0] tmp_7_i_i_fu_512_p2;
wire   [0:0] tmp_25_fu_524_p3;
wire   [53:0] tmp_9_i_i_fu_518_p2;
wire   [7:0] tmp_20_fu_532_p1;
wire   [7:0] tmp_22_fu_536_p4;
wire   [8:0] tmp_7_cast_fu_554_p1;
wire   [8:0] tmp_18_cast_fu_557_p1;
wire   [8:0] tmp_19_fu_560_p2;
wire   [0:0] abscond_fu_572_p2;
wire   [8:0] neg_fu_566_p2;
wire   [8:0] abs_fu_578_p3;
wire    grp_fu_341_ce;
wire    grp_fu_345_ce;
wire    grp_fu_349_ce;
wire    grp_fu_354_ce;
wire    grp_fu_359_ce;
wire    grp_fu_364_ce;
wire    grp_fu_367_ce;
wire    grp_fu_370_ce;
reg   [18:0] ap_NS_fsm;
reg    ap_sig_bdd_737;


backsub_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
backsub_AXILiteS_s_axi_U(
    .AWVALID( s_axi_AXILiteS_AWVALID ),
    .AWREADY( s_axi_AXILiteS_AWREADY ),
    .AWADDR( s_axi_AXILiteS_AWADDR ),
    .WVALID( s_axi_AXILiteS_WVALID ),
    .WREADY( s_axi_AXILiteS_WREADY ),
    .WDATA( s_axi_AXILiteS_WDATA ),
    .WSTRB( s_axi_AXILiteS_WSTRB ),
    .ARVALID( s_axi_AXILiteS_ARVALID ),
    .ARREADY( s_axi_AXILiteS_ARREADY ),
    .ARADDR( s_axi_AXILiteS_ARADDR ),
    .RVALID( s_axi_AXILiteS_RVALID ),
    .RREADY( s_axi_AXILiteS_RREADY ),
    .RDATA( s_axi_AXILiteS_RDATA ),
    .RRESP( s_axi_AXILiteS_RRESP ),
    .BVALID( s_axi_AXILiteS_BVALID ),
    .BREADY( s_axi_AXILiteS_BREADY ),
    .BRESP( s_axi_AXILiteS_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( backsub_AXILiteS_s_axi_U_ap_dummy_ce ),
    .frame_in( frame_in ),
    .frame_out( frame_out )
);

backsub_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
backsub_CRTL_BUS_s_axi_U(
    .AWVALID( s_axi_CRTL_BUS_AWVALID ),
    .AWREADY( s_axi_CRTL_BUS_AWREADY ),
    .AWADDR( s_axi_CRTL_BUS_AWADDR ),
    .WVALID( s_axi_CRTL_BUS_WVALID ),
    .WREADY( s_axi_CRTL_BUS_WREADY ),
    .WDATA( s_axi_CRTL_BUS_WDATA ),
    .WSTRB( s_axi_CRTL_BUS_WSTRB ),
    .ARVALID( s_axi_CRTL_BUS_ARVALID ),
    .ARREADY( s_axi_CRTL_BUS_ARREADY ),
    .ARADDR( s_axi_CRTL_BUS_ARADDR ),
    .RVALID( s_axi_CRTL_BUS_RVALID ),
    .RREADY( s_axi_CRTL_BUS_RREADY ),
    .RDATA( s_axi_CRTL_BUS_RDATA ),
    .RRESP( s_axi_CRTL_BUS_RRESP ),
    .BVALID( s_axi_CRTL_BUS_BVALID ),
    .BREADY( s_axi_CRTL_BUS_BREADY ),
    .BRESP( s_axi_CRTL_BUS_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( backsub_CRTL_BUS_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .ap_return( ap_return ),
    .init( init )
);

backsub_gmem_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
backsub_gmem_m_axi_U(
    .AWVALID( m_axi_gmem_AWVALID ),
    .AWREADY( m_axi_gmem_AWREADY ),
    .AWADDR( m_axi_gmem_AWADDR ),
    .AWID( m_axi_gmem_AWID ),
    .AWLEN( m_axi_gmem_AWLEN ),
    .AWSIZE( m_axi_gmem_AWSIZE ),
    .AWBURST( m_axi_gmem_AWBURST ),
    .AWLOCK( m_axi_gmem_AWLOCK ),
    .AWCACHE( m_axi_gmem_AWCACHE ),
    .AWPROT( m_axi_gmem_AWPROT ),
    .AWQOS( m_axi_gmem_AWQOS ),
    .AWREGION( m_axi_gmem_AWREGION ),
    .AWUSER( m_axi_gmem_AWUSER ),
    .WVALID( m_axi_gmem_WVALID ),
    .WREADY( m_axi_gmem_WREADY ),
    .WDATA( m_axi_gmem_WDATA ),
    .WSTRB( m_axi_gmem_WSTRB ),
    .WLAST( m_axi_gmem_WLAST ),
    .WID( m_axi_gmem_WID ),
    .WUSER( m_axi_gmem_WUSER ),
    .ARVALID( m_axi_gmem_ARVALID ),
    .ARREADY( m_axi_gmem_ARREADY ),
    .ARADDR( m_axi_gmem_ARADDR ),
    .ARID( m_axi_gmem_ARID ),
    .ARLEN( m_axi_gmem_ARLEN ),
    .ARSIZE( m_axi_gmem_ARSIZE ),
    .ARBURST( m_axi_gmem_ARBURST ),
    .ARLOCK( m_axi_gmem_ARLOCK ),
    .ARCACHE( m_axi_gmem_ARCACHE ),
    .ARPROT( m_axi_gmem_ARPROT ),
    .ARQOS( m_axi_gmem_ARQOS ),
    .ARREGION( m_axi_gmem_ARREGION ),
    .ARUSER( m_axi_gmem_ARUSER ),
    .RVALID( m_axi_gmem_RVALID ),
    .RREADY( m_axi_gmem_RREADY ),
    .RDATA( m_axi_gmem_RDATA ),
    .RLAST( m_axi_gmem_RLAST ),
    .RID( m_axi_gmem_RID ),
    .RUSER( m_axi_gmem_RUSER ),
    .RRESP( m_axi_gmem_RRESP ),
    .BVALID( m_axi_gmem_BVALID ),
    .BREADY( m_axi_gmem_BREADY ),
    .BRESP( m_axi_gmem_BRESP ),
    .BID( m_axi_gmem_BID ),
    .BUSER( m_axi_gmem_BUSER ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( backsub_gmem_m_axi_U_ap_dummy_ce ),
    .I_ARVALID( gmem_ARVALID ),
    .I_ARREADY( gmem_ARREADY ),
    .I_ARADDR( gmem_ARADDR ),
    .I_ARID( gmem_ARID ),
    .I_ARLEN( gmem_ARLEN ),
    .I_ARSIZE( gmem_ARSIZE ),
    .I_ARLOCK( gmem_ARLOCK ),
    .I_ARCACHE( gmem_ARCACHE ),
    .I_ARQOS( gmem_ARQOS ),
    .I_ARPROT( gmem_ARPROT ),
    .I_ARUSER( gmem_ARUSER ),
    .I_ARBURST( gmem_ARBURST ),
    .I_ARREGION( gmem_ARREGION ),
    .I_RVALID( gmem_RVALID ),
    .I_RREADY( gmem_RREADY ),
    .I_RDATA( gmem_RDATA ),
    .I_RID( gmem_RID ),
    .I_RUSER( gmem_RUSER ),
    .I_RRESP( gmem_RRESP ),
    .I_RLAST( gmem_RLAST ),
    .I_AWVALID( gmem_AWVALID ),
    .I_AWREADY( gmem_AWREADY ),
    .I_AWADDR( gmem_AWADDR ),
    .I_AWID( gmem_AWID ),
    .I_AWLEN( gmem_AWLEN ),
    .I_AWSIZE( gmem_AWSIZE ),
    .I_AWLOCK( gmem_AWLOCK ),
    .I_AWCACHE( gmem_AWCACHE ),
    .I_AWQOS( gmem_AWQOS ),
    .I_AWPROT( gmem_AWPROT ),
    .I_AWUSER( gmem_AWUSER ),
    .I_AWBURST( gmem_AWBURST ),
    .I_AWREGION( gmem_AWREGION ),
    .I_WVALID( gmem_WVALID ),
    .I_WREADY( gmem_WREADY ),
    .I_WDATA( gmem_WDATA ),
    .I_WID( gmem_WID ),
    .I_WUSER( gmem_WUSER ),
    .I_WLAST( gmem_WLAST ),
    .I_WSTRB( gmem_WSTRB ),
    .I_BVALID( gmem_BVALID ),
    .I_BREADY( gmem_BREADY ),
    .I_BRESP( gmem_BRESP ),
    .I_BID( gmem_BID ),
    .I_BUSER( gmem_BUSER )
);

backsub_frame1 #(
    .DataWidth( 8 ),
    .AddressRange( 76800 ),
    .AddressWidth( 17 ))
frame1_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .address0( frame1_address0 ),
    .ce0( frame1_ce0 ),
    .we0( frame1_we0 ),
    .d0( frame1_d0 ),
    .q0( frame1_q0 )
);

backsub_frame2 #(
    .DataWidth( 8 ),
    .AddressRange( 76800 ),
    .AddressWidth( 17 ))
frame2_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .address0( frame2_address0 ),
    .ce0( frame2_ce0 ),
    .we0( frame2_we0 ),
    .d0( frame2_d0 ),
    .q0( frame2_q0 ),
    .address1( frame2_address1 ),
    .ce1( frame2_ce1 ),
    .we1( frame2_we1 ),
    .d1( frame2_d1 )
);

backsub_frame2 #(
    .DataWidth( 8 ),
    .AddressRange( 76800 ),
    .AddressWidth( 17 ))
frame3_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .address0( frame3_address0 ),
    .ce0( frame3_ce0 ),
    .we0( frame3_we0 ),
    .d0( frame3_d0 ),
    .q0( frame3_q0 ),
    .address1( frame3_address1 ),
    .ce1( frame3_ce1 ),
    .we1( frame3_we1 ),
    .d1( frame3_d1 )
);

backsub_frame1 #(
    .DataWidth( 8 ),
    .AddressRange( 76800 ),
    .AddressWidth( 17 ))
out_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .address0( out_address0 ),
    .ce0( out_ce0 ),
    .we0( out_we0 ),
    .d0( out_d0 ),
    .q0( out_q0 )
);

backsub_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
backsub_fadd_32ns_32ns_32_5_full_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( tmp_9_reg_751 ),
    .din1( tmp_12_reg_756 ),
    .ce( grp_fu_341_ce ),
    .dout( grp_fu_341_p2 )
);

backsub_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
backsub_fadd_32ns_32ns_32_5_full_dsp_U2(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( tmp_13_reg_766 ),
    .din1( tmp_16_reg_771 ),
    .ce( grp_fu_345_ce ),
    .dout( grp_fu_345_p2 )
);

backsub_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
backsub_fmul_32ns_32ns_32_4_max_dsp_U3(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( tmp_8_reg_736 ),
    .din1( ap_const_lv32_3DCCCCCD ),
    .ce( grp_fu_349_ce ),
    .dout( grp_fu_349_p2 )
);

backsub_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
backsub_fmul_32ns_32ns_32_4_max_dsp_U4(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( tmp_11_reg_741 ),
    .din1( ap_const_lv32_3E4CCCCD ),
    .ce( grp_fu_354_ce ),
    .dout( grp_fu_354_p2 )
);

backsub_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
backsub_fmul_32ns_32ns_32_4_max_dsp_U5(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( tmp_15_reg_761 ),
    .din1( ap_const_lv32_3F333333 ),
    .ce( grp_fu_359_ce ),
    .dout( grp_fu_359_p2 )
);

backsub_sitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
backsub_sitofp_32ns_32_6_U6(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( grp_fu_364_p0 ),
    .ce( grp_fu_364_ce ),
    .dout( grp_fu_364_p1 )
);

backsub_sitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
backsub_sitofp_32ns_32_6_U7(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( grp_fu_367_p0 ),
    .ce( grp_fu_367_ce ),
    .dout( grp_fu_367_p1 )
);

backsub_sitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
backsub_sitofp_32ns_32_6_U8(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( grp_fu_370_p0 ),
    .ce( grp_fu_370_ce ),
    .dout( grp_fu_370_p1 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_gmem_ARREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_gmem_ARREADY)) begin
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == gmem_ARREADY)) begin
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
            end
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_gmem_AWREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st40_fsm_12)) begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_gmem_AWREADY)) begin
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == gmem_AWREADY)) begin
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
            end
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_gmem_WREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_737) begin
            if (~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_0 == ap_sig_ioackin_gmem_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2))) begin
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == gmem_WREADY)) begin
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
            end
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & ~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond8_fu_390_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & ~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == exitcond8_fu_390_p2))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & ~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond8_fu_390_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & ~(ap_const_lv1_0 == exitcond_fu_407_p2))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_9) & (ap_const_lv1_0 == init_read_reg_638))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (ap_const_lv1_0 == exitcond_fu_407_p2))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_9) & (ap_const_lv1_0 == init_read_reg_638)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & ~(ap_const_lv1_0 == exitcond_fu_407_p2)))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it10
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it10 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it10 <= ap_reg_ppiten_pp1_it9;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it11
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it11 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it11 <= ap_reg_ppiten_pp1_it10;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it12
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it12 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it12 <= ap_reg_ppiten_pp1_it11;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it13
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it13 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it13 <= ap_reg_ppiten_pp1_it12;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it14
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it14 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it14 <= ap_reg_ppiten_pp1_it13;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it15
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it15 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it15 <= ap_reg_ppiten_pp1_it14;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it16
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it16 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it16 <= ap_reg_ppiten_pp1_it15;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it17
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it17 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it17 <= ap_reg_ppiten_pp1_it16;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it18
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it18 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it18 <= ap_reg_ppiten_pp1_it17;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it19
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it19 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it19 <= ap_reg_ppiten_pp1_it18;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it20
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it20 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it20 <= ap_reg_ppiten_pp1_it19;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it21
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it21 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it21 <= ap_reg_ppiten_pp1_it20;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it22
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it22 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it22 <= ap_reg_ppiten_pp1_it21;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it23
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it23 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it23 <= ap_reg_ppiten_pp1_it22;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it24
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it24 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it24 <= ap_reg_ppiten_pp1_it23;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it3
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it4
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it5
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it5 <= ap_reg_ppiten_pp1_it4;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it6
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it6 <= ap_reg_ppiten_pp1_it5;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it7
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it7 <= ap_reg_ppiten_pp1_it6;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it8
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it8 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it8 <= ap_reg_ppiten_pp1_it7;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it9
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it9 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it9 <= ap_reg_ppiten_pp1_it8;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp2_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & ~(ap_const_lv1_0 == exitcond1_fu_600_p2))) begin
            ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_9) & ~(ap_const_lv1_0 == init_read_reg_638))) begin
            ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp2_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_lv1_0 == exitcond1_fu_600_p2))) begin
            ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_9) & ~(ap_const_lv1_0 == init_read_reg_638)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & ~(ap_const_lv1_0 == exitcond1_fu_600_p2)))) begin
            ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp3_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp3_stg0_fsm_13) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_0 == ap_sig_ioackin_gmem_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2)) & ~(ap_const_lv1_0 == exitcond2_fu_621_p2))) begin
            ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st40_fsm_12) & ~(ap_const_logic_0 == ap_sig_ioackin_gmem_AWREADY))) begin
            ap_reg_ppiten_pp3_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp3_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp3_stg0_fsm_13) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_0 == ap_sig_ioackin_gmem_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2)) & (ap_const_lv1_0 == exitcond2_fu_621_p2))) begin
            ap_reg_ppiten_pp3_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st40_fsm_12) & ~(ap_const_logic_0 == ap_sig_ioackin_gmem_AWREADY)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp3_stg0_fsm_13) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_0 == ap_sig_ioackin_gmem_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2)) & ~(ap_const_lv1_0 == exitcond2_fu_621_p2)))) begin
            ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp3_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp3_it2 <= ap_const_logic_0;
    end else begin
        if (~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_0 == ap_sig_ioackin_gmem_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2))) begin
            ap_reg_ppiten_pp3_it2 <= ap_reg_ppiten_pp3_it1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st40_fsm_12) & ~(ap_const_logic_0 == ap_sig_ioackin_gmem_AWREADY))) begin
            ap_reg_ppiten_pp3_it2 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_9) & (ap_const_lv1_0 == init_read_reg_638))) begin
        i1_reg_308 <= ap_const_lv17_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & (ap_const_lv1_0 == exitcond_fu_407_p2))) begin
        i1_reg_308 <= i_2_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_9) & ~(ap_const_lv1_0 == init_read_reg_638))) begin
        i_reg_319 <= ap_const_lv17_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & (ap_const_lv1_0 == exitcond1_fu_600_p2))) begin
        i_reg_319 <= i_1_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp3_stg0_fsm_13) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_0 == ap_sig_ioackin_gmem_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2)) & (ap_const_lv1_0 == exitcond2_fu_621_p2))) begin
        indvar1_reg_330 <= indvar_next1_fu_627_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st40_fsm_12) & ~(ap_const_logic_0 == ap_sig_ioackin_gmem_AWREADY))) begin
        indvar1_reg_330 <= ap_const_lv17_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & (exitcond8_reg_662 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        indvar_reg_296 <= indvar_next_reg_666;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        indvar_reg_296 <= ap_const_lv17_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp3_stg0_fsm_13) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_0 == ap_sig_ioackin_gmem_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2)))) begin
        ap_reg_ppstg_exitcond2_reg_823_pp3_it1 <= exitcond2_reg_823;
        exitcond2_reg_823 <= exitcond2_fu_621_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & ~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        ap_reg_ppstg_exitcond8_reg_662_pp0_it1 <= exitcond8_reg_662;
        ap_reg_ppstg_indvar_reg_296_pp0_it1 <= indvar_reg_296;
        exitcond8_reg_662 <= exitcond8_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_10)) begin
        ap_reg_ppstg_exitcond_reg_676_pp1_it1 <= exitcond_reg_676;
        ap_reg_ppstg_tmp_6_reg_685_pp1_it1[16 : 0] <= tmp_6_reg_685[16 : 0];
        exitcond_reg_676 <= exitcond_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_true == ap_true)) begin
        ap_reg_ppstg_exitcond_reg_676_pp1_it10 <= ap_reg_ppstg_exitcond_reg_676_pp1_it9;
        ap_reg_ppstg_exitcond_reg_676_pp1_it11 <= ap_reg_ppstg_exitcond_reg_676_pp1_it10;
        ap_reg_ppstg_exitcond_reg_676_pp1_it12 <= ap_reg_ppstg_exitcond_reg_676_pp1_it11;
        ap_reg_ppstg_exitcond_reg_676_pp1_it13 <= ap_reg_ppstg_exitcond_reg_676_pp1_it12;
        ap_reg_ppstg_exitcond_reg_676_pp1_it14 <= ap_reg_ppstg_exitcond_reg_676_pp1_it13;
        ap_reg_ppstg_exitcond_reg_676_pp1_it15 <= ap_reg_ppstg_exitcond_reg_676_pp1_it14;
        ap_reg_ppstg_exitcond_reg_676_pp1_it16 <= ap_reg_ppstg_exitcond_reg_676_pp1_it15;
        ap_reg_ppstg_exitcond_reg_676_pp1_it17 <= ap_reg_ppstg_exitcond_reg_676_pp1_it16;
        ap_reg_ppstg_exitcond_reg_676_pp1_it18 <= ap_reg_ppstg_exitcond_reg_676_pp1_it17;
        ap_reg_ppstg_exitcond_reg_676_pp1_it19 <= ap_reg_ppstg_exitcond_reg_676_pp1_it18;
        ap_reg_ppstg_exitcond_reg_676_pp1_it2 <= ap_reg_ppstg_exitcond_reg_676_pp1_it1;
        ap_reg_ppstg_exitcond_reg_676_pp1_it20 <= ap_reg_ppstg_exitcond_reg_676_pp1_it19;
        ap_reg_ppstg_exitcond_reg_676_pp1_it21 <= ap_reg_ppstg_exitcond_reg_676_pp1_it20;
        ap_reg_ppstg_exitcond_reg_676_pp1_it22 <= ap_reg_ppstg_exitcond_reg_676_pp1_it21;
        ap_reg_ppstg_exitcond_reg_676_pp1_it23 <= ap_reg_ppstg_exitcond_reg_676_pp1_it22;
        ap_reg_ppstg_exitcond_reg_676_pp1_it3 <= ap_reg_ppstg_exitcond_reg_676_pp1_it2;
        ap_reg_ppstg_exitcond_reg_676_pp1_it4 <= ap_reg_ppstg_exitcond_reg_676_pp1_it3;
        ap_reg_ppstg_exitcond_reg_676_pp1_it5 <= ap_reg_ppstg_exitcond_reg_676_pp1_it4;
        ap_reg_ppstg_exitcond_reg_676_pp1_it6 <= ap_reg_ppstg_exitcond_reg_676_pp1_it5;
        ap_reg_ppstg_exitcond_reg_676_pp1_it7 <= ap_reg_ppstg_exitcond_reg_676_pp1_it6;
        ap_reg_ppstg_exitcond_reg_676_pp1_it8 <= ap_reg_ppstg_exitcond_reg_676_pp1_it7;
        ap_reg_ppstg_exitcond_reg_676_pp1_it9 <= ap_reg_ppstg_exitcond_reg_676_pp1_it8;
        ap_reg_ppstg_tmp_6_reg_685_pp1_it10[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it9[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it11[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it10[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it12[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it11[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it13[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it12[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it14[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it13[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it15[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it14[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it16[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it15[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it17[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it16[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it18[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it17[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it19[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it18[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it2[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it1[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it20[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it19[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it21[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it20[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it22[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it21[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it23[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it22[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it3[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it2[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it4[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it3[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it5[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it4[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it6[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it5[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it7[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it6[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it8[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it7[16 : 0];
        ap_reg_ppstg_tmp_6_reg_685_pp1_it9[16 : 0] <= ap_reg_ppstg_tmp_6_reg_685_pp1_it8[16 : 0];
        ap_reg_ppstg_val1_reg_703_pp1_it10 <= ap_reg_ppstg_val1_reg_703_pp1_it9;
        ap_reg_ppstg_val1_reg_703_pp1_it11 <= ap_reg_ppstg_val1_reg_703_pp1_it10;
        ap_reg_ppstg_val1_reg_703_pp1_it12 <= ap_reg_ppstg_val1_reg_703_pp1_it11;
        ap_reg_ppstg_val1_reg_703_pp1_it13 <= ap_reg_ppstg_val1_reg_703_pp1_it12;
        ap_reg_ppstg_val1_reg_703_pp1_it14 <= ap_reg_ppstg_val1_reg_703_pp1_it13;
        ap_reg_ppstg_val1_reg_703_pp1_it15 <= ap_reg_ppstg_val1_reg_703_pp1_it14;
        ap_reg_ppstg_val1_reg_703_pp1_it16 <= ap_reg_ppstg_val1_reg_703_pp1_it15;
        ap_reg_ppstg_val1_reg_703_pp1_it17 <= ap_reg_ppstg_val1_reg_703_pp1_it16;
        ap_reg_ppstg_val1_reg_703_pp1_it18 <= ap_reg_ppstg_val1_reg_703_pp1_it17;
        ap_reg_ppstg_val1_reg_703_pp1_it19 <= ap_reg_ppstg_val1_reg_703_pp1_it18;
        ap_reg_ppstg_val1_reg_703_pp1_it2 <= val1_reg_703;
        ap_reg_ppstg_val1_reg_703_pp1_it20 <= ap_reg_ppstg_val1_reg_703_pp1_it19;
        ap_reg_ppstg_val1_reg_703_pp1_it21 <= ap_reg_ppstg_val1_reg_703_pp1_it20;
        ap_reg_ppstg_val1_reg_703_pp1_it22 <= ap_reg_ppstg_val1_reg_703_pp1_it21;
        ap_reg_ppstg_val1_reg_703_pp1_it3 <= ap_reg_ppstg_val1_reg_703_pp1_it2;
        ap_reg_ppstg_val1_reg_703_pp1_it4 <= ap_reg_ppstg_val1_reg_703_pp1_it3;
        ap_reg_ppstg_val1_reg_703_pp1_it5 <= ap_reg_ppstg_val1_reg_703_pp1_it4;
        ap_reg_ppstg_val1_reg_703_pp1_it6 <= ap_reg_ppstg_val1_reg_703_pp1_it5;
        ap_reg_ppstg_val1_reg_703_pp1_it7 <= ap_reg_ppstg_val1_reg_703_pp1_it6;
        ap_reg_ppstg_val1_reg_703_pp1_it8 <= ap_reg_ppstg_val1_reg_703_pp1_it7;
        ap_reg_ppstg_val1_reg_703_pp1_it9 <= ap_reg_ppstg_val1_reg_703_pp1_it8;
        ap_reg_ppstg_val2_reg_710_pp1_it2 <= val2_reg_710;
        ap_reg_ppstg_val2_reg_710_pp1_it3 <= ap_reg_ppstg_val2_reg_710_pp1_it2;
        ap_reg_ppstg_val2_reg_710_pp1_it4 <= ap_reg_ppstg_val2_reg_710_pp1_it3;
        ap_reg_ppstg_val2_reg_710_pp1_it5 <= ap_reg_ppstg_val2_reg_710_pp1_it4;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11)) begin
        exitcond1_reg_797 <= exitcond1_fu_600_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        frame_in_read_reg_647 <= frame_in;
        frame_out_read_reg_642 <= frame_out;
        init_read_reg_638 <= init_read_read_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & (exitcond8_reg_662 == ap_const_lv1_0) & ~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        gmem_addr_1_read_reg_671 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        indvar_next_reg_666 <= indvar_next_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_676_pp1_it20)) begin
        loc_V_1_reg_782 <= loc_V_1_fu_451_p1;
        loc_V_reg_776 <= {{p_Val2_s_fu_437_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_676_pp1_it22)) begin
        not_tmp_s_reg_792 <= not_tmp_s_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp3_stg0_fsm_13) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it1) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_0 == ap_sig_ioackin_gmem_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2)) & (ap_const_lv1_0 == exitcond2_reg_823))) begin
        out_load_reg_837 <= out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_676_pp1_it21)) begin
        result_V_reg_787 <= result_V_fu_546_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_676_pp1_it6)) begin
        tmp_11_reg_741 <= grp_fu_367_p1;
        tmp_8_reg_736 <= grp_fu_364_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_676_pp1_it10)) begin
        tmp_12_reg_756 <= grp_fu_354_p2;
        tmp_9_reg_751 <= grp_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_676_pp1_it15)) begin
        tmp_13_reg_766 <= grp_fu_341_p2;
        tmp_16_reg_771 <= grp_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_676_pp1_it11)) begin
        tmp_15_reg_761 <= grp_fu_370_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == ap_sig_ioackin_gmem_ARREADY))) begin
        tmp_17_reg_652 <= tmp_17_fu_386_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st40_fsm_12) & ~(ap_const_logic_0 == ap_sig_ioackin_gmem_AWREADY))) begin
        tmp_18_reg_818 <= tmp_18_fu_617_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_lv1_0 == exitcond1_fu_600_p2))) begin
        tmp_4_reg_806[16 : 0] <= tmp_4_fu_612_p1[16 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (ap_const_lv1_0 == exitcond_fu_407_p2))) begin
        tmp_6_reg_685[16 : 0] <= tmp_6_fu_419_p1[16 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & (ap_const_lv1_0 == exitcond_reg_676))) begin
        val1_reg_703 <= frame1_q0;
        val2_reg_710 <= frame2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it6) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_676_pp1_it5))) begin
        val3_reg_731 <= frame3_q0;
    end
end

always @ (gmem_BVALID or ap_sig_cseq_ST_st48_fsm_18) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st48_fsm_18) & ~(gmem_BVALID == ap_const_logic_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (gmem_BVALID or ap_sig_cseq_ST_st48_fsm_18) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st48_fsm_18) & ~(gmem_BVALID == ap_const_logic_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_250) begin
    if (ap_sig_bdd_250) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_8 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_314) begin
    if (ap_sig_bdd_314) begin
        ap_sig_cseq_ST_pp1_stg0_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp1_stg0_fsm_10 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_556) begin
    if (ap_sig_bdd_556) begin
        ap_sig_cseq_ST_pp2_stg0_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp2_stg0_fsm_11 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_591) begin
    if (ap_sig_bdd_591) begin
        ap_sig_cseq_ST_pp3_stg0_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp3_stg0_fsm_13 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_648) begin
    if (ap_sig_bdd_648) begin
        ap_sig_cseq_ST_st12_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_9 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_37) begin
    if (ap_sig_bdd_37) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_289) begin
    if (ap_sig_bdd_289) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_578) begin
    if (ap_sig_bdd_578) begin
        ap_sig_cseq_ST_st40_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st40_fsm_12 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_629) begin
    if (ap_sig_bdd_629) begin
        ap_sig_cseq_ST_st44_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st44_fsm_14 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_767) begin
    if (ap_sig_bdd_767) begin
        ap_sig_cseq_ST_st48_fsm_18 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st48_fsm_18 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_636) begin
    if (ap_sig_bdd_636) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

always @ (gmem_ARREADY or ap_reg_ioackin_gmem_ARREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_gmem_ARREADY)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1;
    end
end

always @ (gmem_AWREADY or ap_reg_ioackin_gmem_AWREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_gmem_AWREADY)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1;
    end
end

always @ (gmem_WREADY or ap_reg_ioackin_gmem_WREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_gmem_WREADY)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = ap_const_logic_1;
    end
end

always @ (ap_reg_ppiten_pp0_it2 or ap_sig_cseq_ST_pp1_stg0_fsm_10 or ap_reg_ppiten_pp1_it0 or tmp_6_fu_419_p1 or ap_sig_cseq_ST_pp2_stg0_fsm_11 or ap_reg_ppiten_pp2_it0 or tmp_4_fu_612_p1 or tmp_s_fu_402_p1) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) begin
        frame1_address0 = tmp_s_fu_402_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it0))) begin
        frame1_address0 = tmp_4_fu_612_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0))) begin
        frame1_address0 = tmp_6_fu_419_p1;
    end else begin
        frame1_address0 = 'bx;
    end
end

always @ (ap_sig_bdd_259 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_sig_cseq_ST_pp1_stg0_fsm_10 or ap_reg_ppiten_pp1_it0 or ap_sig_cseq_ST_pp2_stg0_fsm_11 or ap_reg_ppiten_pp2_it0) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        frame1_ce0 = ap_const_logic_1;
    end else begin
        frame1_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_259 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ppstg_exitcond8_reg_662_pp0_it1) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond8_reg_662_pp0_it1))) begin
        frame1_we0 = ap_const_logic_1;
    end else begin
        frame1_we0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp1_stg0_fsm_10 or ap_reg_ppiten_pp1_it0 or tmp_6_fu_419_p1 or ap_sig_cseq_ST_pp2_stg0_fsm_11 or ap_reg_ppiten_pp2_it1 or tmp_4_reg_806) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1))) begin
        frame2_address0 = tmp_4_reg_806;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0))) begin
        frame2_address0 = tmp_6_fu_419_p1;
    end else begin
        frame2_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_pp1_stg0_fsm_10 or ap_reg_ppiten_pp1_it0 or ap_sig_cseq_ST_pp2_stg0_fsm_11 or ap_reg_ppiten_pp2_it1) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
        frame2_ce0 = ap_const_logic_1;
    end else begin
        frame2_ce0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp1_it23) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it23)) begin
        frame2_ce1 = ap_const_logic_1;
    end else begin
        frame2_ce1 = ap_const_logic_0;
    end
end

always @ (exitcond1_reg_797 or ap_sig_cseq_ST_pp2_stg0_fsm_11 or ap_reg_ppiten_pp2_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & (ap_const_lv1_0 == exitcond1_reg_797))) begin
        frame2_we0 = ap_const_logic_1;
    end else begin
        frame2_we0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp1_it23 or ap_reg_ppstg_exitcond_reg_676_pp1_it22) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it23) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_676_pp1_it22))) begin
        frame2_we1 = ap_const_logic_1;
    end else begin
        frame2_we1 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp1_it5 or ap_reg_ppstg_tmp_6_reg_685_pp1_it4 or ap_sig_cseq_ST_pp2_stg0_fsm_11 or ap_reg_ppiten_pp2_it1 or tmp_4_reg_806) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1))) begin
        frame3_address0 = tmp_4_reg_806;
    end else if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it5)) begin
        frame3_address0 = ap_reg_ppstg_tmp_6_reg_685_pp1_it4;
    end else begin
        frame3_address0 = 'bx;
    end
end

always @ (ap_reg_ppiten_pp1_it5 or ap_sig_cseq_ST_pp2_stg0_fsm_11 or ap_reg_ppiten_pp2_it1) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it5) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
        frame3_ce0 = ap_const_logic_1;
    end else begin
        frame3_ce0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp1_it6) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it6)) begin
        frame3_ce1 = ap_const_logic_1;
    end else begin
        frame3_ce1 = ap_const_logic_0;
    end
end

always @ (exitcond1_reg_797 or ap_sig_cseq_ST_pp2_stg0_fsm_11 or ap_reg_ppiten_pp2_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & (ap_const_lv1_0 == exitcond1_reg_797))) begin
        frame3_we0 = ap_const_logic_1;
    end else begin
        frame3_we0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp1_it6 or ap_reg_ppstg_exitcond_reg_676_pp1_it5) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it6) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_676_pp1_it5))) begin
        frame3_we1 = ap_const_logic_1;
    end else begin
        frame3_we1 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_reg_ioackin_gmem_ARREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_logic_0 == ap_reg_ioackin_gmem_ARREADY))) begin
        gmem_ARVALID = ap_const_logic_1;
    end else begin
        gmem_ARVALID = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st40_fsm_12 or ap_reg_ioackin_gmem_AWREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st40_fsm_12) & (ap_const_logic_0 == ap_reg_ioackin_gmem_AWREADY))) begin
        gmem_AWVALID = ap_const_logic_1;
    end else begin
        gmem_AWVALID = ap_const_logic_0;
    end
end

always @ (gmem_BVALID or ap_sig_cseq_ST_st48_fsm_18) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st48_fsm_18) & ~(gmem_BVALID == ap_const_logic_0))) begin
        gmem_BREADY = ap_const_logic_1;
    end else begin
        gmem_BREADY = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_8 or exitcond8_reg_662 or ap_sig_bdd_259 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & (exitcond8_reg_662 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        gmem_RREADY = ap_const_logic_1;
    end else begin
        gmem_RREADY = ap_const_logic_0;
    end
end

always @ (ap_reg_ppstg_exitcond2_reg_823_pp3_it1 or ap_reg_ppiten_pp3_it2 or ap_reg_ioackin_gmem_WREADY) begin
    if (((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2) & (ap_const_logic_0 == ap_reg_ioackin_gmem_WREADY))) begin
        gmem_WVALID = ap_const_logic_1;
    end else begin
        gmem_WVALID = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_8 or exitcond8_reg_662 or ap_reg_ppiten_pp0_it1 or tmp_17_fu_386_p1 or tmp_17_reg_652 or ap_sig_cseq_ST_st2_fsm_1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & (exitcond8_reg_662 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        grp_fu_373_p2 = tmp_17_reg_652;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        grp_fu_373_p2 = tmp_17_fu_386_p1;
    end else begin
        grp_fu_373_p2 = 'bx;
    end
end

always @ (tmp_18_fu_617_p1 or tmp_18_reg_818 or ap_sig_cseq_ST_st40_fsm_12 or ap_reg_ppstg_exitcond2_reg_823_pp3_it1 or ap_reg_ppiten_pp3_it2 or ap_sig_cseq_ST_st44_fsm_14) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st44_fsm_14) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2)))) begin
        grp_fu_380_p2 = tmp_18_reg_818;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st40_fsm_12)) begin
        grp_fu_380_p2 = tmp_18_fu_617_p1;
    end else begin
        grp_fu_380_p2 = 'bx;
    end
end

always @ (indvar_reg_296 or ap_sig_cseq_ST_pp0_stg0_fsm_8 or exitcond8_reg_662 or ap_reg_ppiten_pp0_it1 or indvar_next_reg_666) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & (exitcond8_reg_662 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        indvar_phi_fu_300_p4 = indvar_next_reg_666;
    end else begin
        indvar_phi_fu_300_p4 = indvar_reg_296;
    end
end

always @ (ap_reg_ppiten_pp1_it24 or ap_reg_ppstg_tmp_6_reg_685_pp1_it23 or ap_sig_cseq_ST_pp2_stg0_fsm_11 or ap_reg_ppiten_pp2_it1 or tmp_4_reg_806 or ap_sig_cseq_ST_pp3_stg0_fsm_13 or ap_reg_ppiten_pp3_it0 or tmp_21_fu_633_p1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1))) begin
        out_address0 = tmp_4_reg_806;
    end else if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it24)) begin
        out_address0 = ap_reg_ppstg_tmp_6_reg_685_pp1_it23;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp3_stg0_fsm_13) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it0))) begin
        out_address0 = tmp_21_fu_633_p1;
    end else begin
        out_address0 = 'bx;
    end
end

always @ (ap_reg_ppiten_pp1_it24 or ap_sig_cseq_ST_pp2_stg0_fsm_11 or ap_reg_ppiten_pp2_it1 or ap_sig_cseq_ST_pp3_stg0_fsm_13 or ap_reg_ppiten_pp3_it0 or ap_reg_ppstg_exitcond2_reg_823_pp3_it1 or ap_sig_ioackin_gmem_WREADY or ap_reg_ppiten_pp3_it2) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it24) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp3_stg0_fsm_13) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_0 == ap_sig_ioackin_gmem_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2))) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
        out_ce0 = ap_const_logic_1;
    end else begin
        out_ce0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp1_it24 or frame1_q0 or ap_sig_cseq_ST_pp2_stg0_fsm_11 or ap_reg_ppiten_pp2_it1 or p_cast_fu_592_p3) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1))) begin
        out_d0 = frame1_q0;
    end else if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it24)) begin
        out_d0 = p_cast_fu_592_p3;
    end else begin
        out_d0 = 'bx;
    end
end

always @ (ap_reg_ppiten_pp1_it24 or ap_reg_ppstg_exitcond_reg_676_pp1_it23 or exitcond1_reg_797 or ap_sig_cseq_ST_pp2_stg0_fsm_11 or ap_reg_ppiten_pp2_it1) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp1_it24) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_676_pp1_it23)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & (ap_const_lv1_0 == exitcond1_reg_797)))) begin
        out_we0 = ap_const_logic_1;
    end else begin
        out_we0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or gmem_BVALID or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_259 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or init_read_reg_638 or ap_sig_ioackin_gmem_ARREADY or exitcond8_fu_390_p2 or exitcond_fu_407_p2 or ap_reg_ppiten_pp1_it0 or ap_reg_ppiten_pp1_it1 or ap_reg_ppiten_pp1_it23 or ap_reg_ppiten_pp1_it24 or exitcond1_fu_600_p2 or ap_reg_ppiten_pp2_it0 or ap_sig_ioackin_gmem_AWREADY or exitcond2_fu_621_p2 or ap_reg_ppiten_pp3_it0 or ap_reg_ppiten_pp3_it1 or ap_reg_ppstg_exitcond2_reg_823_pp3_it1 or ap_sig_ioackin_gmem_WREADY or ap_reg_ppiten_pp3_it2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_gmem_ARREADY)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_8;
        end
        ap_ST_pp0_stg0_fsm_8 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond8_fu_390_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_8;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_259 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond8_fu_390_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st12_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_8;
            end
        end
        ap_ST_st12_fsm_9 : 
        begin
            if (~(ap_const_lv1_0 == init_read_reg_638)) begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_10;
            end
        end
        ap_ST_pp1_stg0_fsm_10 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp1_it24) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it23)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_const_lv1_0 == exitcond_fu_407_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_10;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_const_lv1_0 == exitcond_fu_407_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
                ap_NS_fsm = ap_ST_st40_fsm_12;
            end else begin
                ap_NS_fsm = ap_ST_st40_fsm_12;
            end
        end
        ap_ST_pp2_stg0_fsm_11 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & ~(ap_const_lv1_0 == exitcond1_fu_600_p2))) begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_st40_fsm_12;
            end
        end
        ap_ST_st40_fsm_12 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_gmem_AWREADY)) begin
                ap_NS_fsm = ap_ST_pp3_stg0_fsm_13;
            end else begin
                ap_NS_fsm = ap_ST_st40_fsm_12;
            end
        end
        ap_ST_pp3_stg0_fsm_13 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp3_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_0 == ap_sig_ioackin_gmem_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp3_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp3_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_0 == ap_sig_ioackin_gmem_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2)) & ~(ap_const_lv1_0 == exitcond2_fu_621_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp3_it1)))) begin
                ap_NS_fsm = ap_ST_pp3_stg0_fsm_13;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp3_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_0 == ap_sig_ioackin_gmem_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp3_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp3_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_0 == ap_sig_ioackin_gmem_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2)) & ~(ap_const_lv1_0 == exitcond2_fu_621_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp3_it1)))) begin
                ap_NS_fsm = ap_ST_st44_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_pp3_stg0_fsm_13;
            end
        end
        ap_ST_st44_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st45_fsm_15;
        end
        ap_ST_st45_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st46_fsm_16;
        end
        ap_ST_st46_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st47_fsm_17;
        end
        ap_ST_st47_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st48_fsm_18;
        end
        ap_ST_st48_fsm_18 : 
        begin
            if (~(gmem_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st48_fsm_18;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign abs_fu_578_p3 = ((abscond_fu_572_p2[0:0] === 1'b1) ? tmp_19_fu_560_p2 : neg_fu_566_p2);

assign abscond_fu_572_p2 = ($signed(tmp_19_fu_560_p2) > $signed(9'b000000000)? 1'b1: 1'b0);

assign ap_return = ap_const_lv32_0;


always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_250 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end


always @ (gmem_RVALID or exitcond8_reg_662) begin
    ap_sig_bdd_259 = ((gmem_RVALID == ap_const_logic_0) & (exitcond8_reg_662 == ap_const_lv1_0));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_289 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_314 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_37 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_556 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_578 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_591 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_629 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_636 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_648 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end


always @ (ap_reg_ppstg_exitcond2_reg_823_pp3_it1 or ap_reg_ppiten_pp3_it2) begin
    ap_sig_bdd_737 = ((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_823_pp3_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp3_it2));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_767 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_12]);
end

assign backsub_AXILiteS_s_axi_U_ap_dummy_ce = ap_const_logic_1;

assign backsub_CRTL_BUS_s_axi_U_ap_dummy_ce = ap_const_logic_1;

assign backsub_gmem_m_axi_U_ap_dummy_ce = ap_const_logic_1;

assign exitcond1_fu_600_p2 = (i_reg_319 == ap_const_lv17_12C00? 1'b1: 1'b0);

assign exitcond2_fu_621_p2 = (indvar1_reg_330 == ap_const_lv17_12C00? 1'b1: 1'b0);

assign exitcond8_fu_390_p2 = (indvar_phi_fu_300_p4 == ap_const_lv17_12C00? 1'b1: 1'b0);

assign exitcond_fu_407_p2 = (i1_reg_308 == ap_const_lv17_12C00? 1'b1: 1'b0);

assign frame1_d0 = gmem_addr_1_read_reg_671;

assign frame2_address1 = ap_reg_ppstg_tmp_6_reg_685_pp1_it22;

assign frame2_d0 = frame1_q0;

assign frame2_d1 = ap_reg_ppstg_val1_reg_703_pp1_it22;

assign frame3_address1 = ap_reg_ppstg_tmp_6_reg_685_pp1_it5;

assign frame3_d0 = frame1_q0;

assign frame3_d1 = ap_reg_ppstg_val2_reg_710_pp1_it5;

assign gmem_ARADDR = grp_fu_373_p2;

assign gmem_ARBURST = ap_const_lv2_0;

assign gmem_ARCACHE = ap_const_lv4_0;

assign gmem_ARID = ap_const_lv1_0;

assign gmem_ARLEN = ap_const_lv32_12C00;

assign gmem_ARLOCK = ap_const_lv2_0;

assign gmem_ARPROT = ap_const_lv3_0;

assign gmem_ARQOS = ap_const_lv4_0;

assign gmem_ARREGION = ap_const_lv4_0;

assign gmem_ARSIZE = ap_const_lv3_0;

assign gmem_ARUSER = ap_const_lv1_0;

assign gmem_AWADDR = grp_fu_380_p2;

assign gmem_AWBURST = ap_const_lv2_0;

assign gmem_AWCACHE = ap_const_lv4_0;

assign gmem_AWID = ap_const_lv1_0;

assign gmem_AWLEN = ap_const_lv32_12C00;

assign gmem_AWLOCK = ap_const_lv2_0;

assign gmem_AWPROT = ap_const_lv3_0;

assign gmem_AWQOS = ap_const_lv4_0;

assign gmem_AWREGION = ap_const_lv4_0;

assign gmem_AWSIZE = ap_const_lv3_0;

assign gmem_AWUSER = ap_const_lv1_0;

assign gmem_WDATA = out_load_reg_837;

assign gmem_WID = ap_const_lv1_0;

assign gmem_WLAST = ap_const_logic_0;

assign gmem_WSTRB = ap_const_lv1_1;

assign gmem_WUSER = ap_const_lv1_0;

assign grp_fu_341_ce = ap_const_logic_1;

assign grp_fu_345_ce = ap_const_logic_1;

assign grp_fu_349_ce = ap_const_logic_1;

assign grp_fu_354_ce = ap_const_logic_1;

assign grp_fu_359_ce = ap_const_logic_1;

assign grp_fu_364_ce = ap_const_logic_1;

assign grp_fu_364_p0 = val1_reg_703;

assign grp_fu_367_ce = ap_const_logic_1;

assign grp_fu_367_p0 = val2_reg_710;

assign grp_fu_370_ce = ap_const_logic_1;

assign grp_fu_370_p0 = val3_reg_731;

assign i_1_fu_606_p2 = (i_reg_319 + ap_const_lv17_1);

assign i_2_fu_413_p2 = (i1_reg_308 + ap_const_lv17_1);

assign indvar_next1_fu_627_p2 = (indvar1_reg_330 + ap_const_lv17_1);

assign indvar_next_fu_396_p2 = (indvar_phi_fu_300_p4 + ap_const_lv17_1);

assign init_read_read_fu_152_p2 = init;

assign isNeg_fu_475_p3 = sh_assign_fu_469_p2[ap_const_lv32_8];

assign loc_V_1_fu_451_p1 = p_Val2_s_fu_437_p1[22:0];

assign neg_fu_566_p2 = (ap_const_lv9_0 - tmp_19_fu_560_p2);

assign not_tmp_s_fu_586_p2 = ($signed(abs_fu_578_p3) > $signed(9'b11101)? 1'b1: 1'b0);

assign p_Result_s_fu_455_p3 = {{ap_const_lv1_1}, {loc_V_1_reg_782}};

assign p_Val2_s_fu_437_p1 = grp_fu_345_p2;

assign p_cast_fu_592_p3 = ((not_tmp_s_reg_792[0:0] === 1'b1) ? ap_const_lv8_FF : ap_const_lv8_0);

assign result_V_fu_546_p3 = ((isNeg_fu_475_p3[0:0] === 1'b1) ? tmp_20_fu_532_p1 : tmp_22_fu_536_p4);

assign sh_assign_1_cast_cast_fu_504_p1 = $signed(sh_assign_1_fu_492_p3);

assign sh_assign_1_cast_fu_500_p1 = $signed(sh_assign_1_fu_492_p3);

assign sh_assign_1_fu_492_p3 = ((isNeg_fu_475_p3[0:0] === 1'b1) ? tmp_4_i_i_cast_fu_488_p1 : sh_assign_fu_469_p2);

assign sh_assign_fu_469_p2 = ($signed(ap_const_lv9_181) + $signed(tmp_i_i_i_cast2_fu_466_p1));

assign tmp_17_fu_386_p1 = $signed(frame_in_read_reg_647);

assign tmp_18_cast_fu_557_p1 = result_V_reg_787;

assign tmp_18_fu_617_p1 = $signed(frame_out_read_reg_642);

assign tmp_19_fu_560_p2 = (tmp_7_cast_fu_554_p1 - tmp_18_cast_fu_557_p1);

assign tmp_20_fu_532_p1 = tmp_25_fu_524_p3;

assign tmp_21_fu_633_p1 = indvar1_reg_330;

assign tmp_22_fu_536_p4 = {{tmp_9_i_i_fu_518_p2[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_25_fu_524_p3 = tmp_7_i_i_fu_512_p2[ap_const_lv32_17];

assign tmp_2_i_i_fu_462_p1 = p_Result_s_fu_455_p3;

assign tmp_4_fu_612_p1 = i_reg_319;

assign tmp_4_i_i_cast_fu_488_p1 = $signed(tmp_4_i_i_fu_483_p2);

assign tmp_4_i_i_fu_483_p2 = (ap_const_lv8_7F - loc_V_reg_776);

assign tmp_6_fu_419_p1 = i1_reg_308;

assign tmp_6_i_i_fu_508_p1 = $unsigned(sh_assign_1_cast_fu_500_p1);

assign tmp_7_cast_fu_554_p1 = ap_reg_ppstg_val1_reg_703_pp1_it22;

assign tmp_7_i_i_fu_512_p2 = p_Result_s_fu_455_p3 >> sh_assign_1_cast_cast_fu_504_p1;

assign tmp_9_i_i_fu_518_p2 = tmp_2_i_i_fu_462_p1 << tmp_6_i_i_fu_508_p1;

assign tmp_i_i_i_cast2_fu_466_p1 = loc_V_reg_776;

assign tmp_s_fu_402_p1 = ap_reg_ppstg_indvar_reg_296_pp0_it1;
always @ (posedge ap_clk) begin
    tmp_6_reg_685[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it1[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it2[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it3[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it4[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it5[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it6[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it7[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it8[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it9[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it10[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it11[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it12[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it13[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it14[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it15[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it16[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it17[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it18[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it19[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it20[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it21[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it22[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_685_pp1_it23[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    tmp_4_reg_806[63:17] <= 47'b00000000000000000000000000000000000000000000000;
end



endmodule //backsub

